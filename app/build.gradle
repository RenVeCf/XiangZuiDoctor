apply plugin: 'com.android.application'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.1"
    defaultConfig {
        applicationId "com.ipd.xiangzuidoctor"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true //启用multidex的支持
        flavorDimensions "default"  //必须要保证所有的flavor 都属于同一个维度

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }

        ndk {
            //设置支持的SO库架构
            abiFilters 'armeabi'//armeabi, 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }
    }

    signingConfigs {
        config {
            keyAlias 'xiangzui_doctor'
            keyPassword '123456'
            storeFile file('../xiangzui_doctor.jks')
            storePassword '123456'
        }
        test {
            keyAlias 'xiangzui_doctor'
            keyPassword '123456'
            storeFile file('../xiangzui_doctor.jks')
            storePassword '123456'
        }
    }

    buildTypes {
        release {
            minifyEnabled false // 混淆
            //混淆的配置文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //签名配置
            signingConfig signingConfigs.config
            applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "xiangzui_doctor_${variant.versionCode}-${variant.versionName}-${releaseTime()}.apk"
                }
            }
        }

        debug {
            minifyEnabled false // 混淆
            //混淆的配置文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //签名配置
            signingConfig signingConfigs.test
            applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "xiangzui_doctor_${variant.versionCode}-${variant.versionName}-${releaseTime()}.apk"
                }
            }
        }
    }

    //recommend
    dexOptions {
        jumboMode = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildToolsVersion = '29.0.1'

    //多渠道打包
    productFlavors {
//        huawei {}
//        xiaomi {}
//        yingyongbao {}
        baidu {}
//        wandoujia {}
//        qh360 {}
//        pp {}
//        vivo {}
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    //recommend
    dexOptions {
        jumboMode = true
    }
}

//获取编译时间
static def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0-rc01'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-beta2'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.0.0'
    testImplementation 'junit:junit:4.13-beta-3'
    androidTestImplementation 'androidx.test:runner:1.3.0-alpha02'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0-alpha02'
    implementation 'com.github.xuexiangjys:XUI:1.0.8'
    implementation 'androidx.recyclerview:recyclerview:1.1.0-beta01'
    implementation 'com.google.android.material:material:1.1.0-alpha09'
    implementation 'com.google.guava:listenablefuture:9999.0-empty-to-avoid-conflict-with-guava'
    implementation 'com.github.bumptech.glide:glide:4.8.0'
    //沉浸式状态栏
    // 基础依赖包，必须要依赖
    implementation 'com.gyf.immersionbar:immersionbar:3.0.0-beta05'
    // fragment快速实现（可选）
    implementation 'com.gyf.immersionbar:immersionbar-components:3.0.0-beta05'
    //RxJava2.0所需依赖
    implementation 'io.reactivex.rxjava2:rxjava:2.2.2'
    //Rxandroid2.0线程调度依赖
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.0'
    // 大神写的这个库可以支持到rxjava2.X
    implementation 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'
    //Retrofit2.0所需依赖
    implementation 'com.squareup.retrofit2:retrofit:2.6.1'
    //结果转为实体类所需依赖
    implementation 'com.squareup.retrofit2:converter-gson:2.6.1'
    //OKHttp3.0依赖
    implementation 'com.squareup.okhttp3:okhttp:4.1.0'
    //OKHttp优化策略依赖
    implementation 'com.squareup.okhttp3:logging-interceptor:4.0.0'
    //结果转为基本类型所需依赖
    implementation 'com.squareup.retrofit2:converter-scalars:2.6.1'
    //自动绑定控件框架 butterknife
    implementation 'com.jakewharton:butterknife:10.1.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.1.0'
    //处理rxjava内存泄漏,基础组件
    implementation 'com.trello.rxlifecycle2:rxlifecycle:2.2.2'
    //如果你想绑定到Android特定的生命周期
    implementation 'com.trello.rxlifecycle2:rxlifecycle-android:2.2.2'
    //如果你想要预先写好的Activities和Fragments，你可以作为提供者的子类
    implementation 'com.trello.rxlifecycle2:rxlifecycle-components:2.2.2'
    //万能适配器
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.34'
    //dialog
    implementation 'com.github.f0ris.sweetalert:library:1.6.2'
    //照片选择器
    implementation 'com.github.LuckSiege.PictureSelector:picture_library:v2.2.3'
    //滚动选择器
    implementation 'com.contrarywind:Android-PickerView:4.1.8'
    //权限
    implementation 'com.github.tbruyelle:rxpermissions:0.10.2'
}
